def Program
decl writeInteger: n as int
decl writeByte: b as byte
decl writeChar: b as byte
decl writeString: s as byte[]

decl readInteger is int
decl readByte is byte
decl readChar is byte
decl readString: n as int, s as byte[]

decl extend is int: b as byte
decl shrink is byte: i as int

decl strlen is int: s as byte[]
decl strcmp is int: s1 s2 as byte[]
decl strcpy: trg src as byte[]
decl strcat: trg src as byte[]
    def work is int: P as int, K as int, L as int, freq as int[]
        def ArraySort: x as int[], n as int
            def swap: x y as ref int
            var t is int
            begin
                t := x
                x := y
                y := t
            end

        var changed is byte
        var i is int
        begin
            loop:
            begin
                changed := false
                i := 0
                loop:
                begin
                    if i < n-1:
                    begin
                        if x[i] > x[i+1]:
                        begin
                            swap: x[i], x[i+1]
                            changed := true
                        end
                        i := i+1
                    end
                    else: begin break end
                end
                if not changed: begin break end
            end
        end

    var i j res is int
    var placed is int[12]
    begin
        j := 0
        res := 0
        ArraySort: freq, L

        i := 0
        loop:
        begin
            if i = 12: begin break end
            placed[i] := 0
            i := i + 1
        end

        i := L - 1
        loop:
        begin
            placed[j] := placed[j] + 1
            res := res + freq[i] * placed[j]
            if i = 0: begin break end
            loop:
            begin
                j := (j + 1) % K
                if placed[j] <> P: begin break end
            end
            i := i - 1
        end
        return: res
    end

    def main
    var i j N P K L Y is int
    var freq is int[100]
    begin
        N := readInteger()
        i := 0
        loop:
        begin
            if i = N: begin break end
            P := readInteger()
            K := readInteger()
            L := readInteger()
            j := 0
            loop:
            begin
                if j = L: begin break end
                freq[j] := readInteger()
                j := j + 1
            end

            Y := work(P,K,L,freq)

            writeString: "Case #"
            writeInteger: i+1
            writeString: ": "
            writeInteger: Y
            writeString: "\n"
            i := i + 1
        end
    end
begin
    main
end
