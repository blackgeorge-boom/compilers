def main

    decl writeInteger: n as int
    decl writeByte: b as byte
    decl writeChar: b as byte
    decl writeString: s as byte[]

    decl readInteger is int
    decl readByte is byte
    decl readChar is byte
    decl readString: n as int, s as byte[]

    decl extend is int: b as byte
    decl shrink is byte: i as int

    decl strlen is int: s as byte[]
    decl strcmp is int: s1 s2 as byte[]
    decl strcpy: trg src as byte[]
    decl strcat: trg src as byte[]

    def bsort: n as int, x as int []

        def swap: x y as ref int
            var t is int
            t := x
            x := y
            y := t

        var changed is byte
        var i is int

        loop:
            changed := false
            i := 0
            loop:
                if i < n-1:
                    if x[i] > x[i+1]:
                        swap: x[i], x[i+1]
                        changed := true
                    i := i+1
                else: break
            if not changed: break

    def writeArray: msg as byte [], n as int, x as int []
        var i is int

        writeString: msg
        i := 0
        loop:
            if i < n:
                if i > 0: writeString: ", "
                writeInteger: x[i]
                i := i+1
            else: break
        writeString: "\n"

    var seed i is int
    var x      is int [16]

    seed := 65
    i := 0
    loop:
        if i < 16:
            seed := (seed * 137 + 220 + i) % 101
            x[i] := seed
            i := i+1
        else: break
    writeArray: "Initial array: ", 16, x
    bsort: 16, x
    writeArray: "Sorted array: ", 16, x
